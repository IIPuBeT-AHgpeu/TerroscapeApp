// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TerroscapeApp.Database;
using TerroscapeApp.Models;

#nullable disable

namespace TerroscapeApp.Migrations
{
    [DbContext(typeof(TerroscapeStatsContext))]
    [Migration("20250124100017_MergeWinEnums")]
    partial class MergeWinEnums
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "game_name_enum", new[] { "base", "feral_instincts", "amorphous_peril", "lethal_immortals", "putrefied_enmity" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "survivor_state_enum", new[] { "alive", "injured", "dead" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "win_enum", new[] { "murder", "time", "escape", "police", "plan", "other" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TerroscapeApp.Database.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstSkill")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_skill");

                    b.Property<DBEnums.GameNameEnum>("GameName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("game_name_enum")
                        .HasDefaultValue(DBEnums.GameNameEnum.Base)
                        .HasColumnName("game_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<string>("SecondSkill")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("second_skill");

                    b.HasKey("Id")
                        .HasName("survivor_pkey");

                    b.ToTable("avatar", (string)null);
                });

            modelBuilder.Entity("TerroscapeApp.Database.Killer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DBEnums.GameNameEnum>("GameName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("game_name_enum")
                        .HasDefaultValue(DBEnums.GameNameEnum.Base)
                        .HasColumnName("game_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<int>("Strength")
                        .HasColumnType("integer")
                        .HasColumnName("strength");

                    b.HasKey("Id")
                        .HasName("killer_id_pk");

                    b.ToTable("killer", (string)null);
                });

            modelBuilder.Entity("TerroscapeApp.Database.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationsNum")
                        .HasColumnType("integer")
                        .HasColumnName("locations_num");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("map_id_pk");

                    b.HasIndex(new[] { "Name" }, "map_name_uq")
                        .IsUnique();

                    b.ToTable("map", (string)null);
                });

            modelBuilder.Entity("TerroscapeApp.Database.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("player_id_pk");

                    b.HasIndex(new[] { "Login" }, "player_login_uq")
                        .IsUnique();

                    b.ToTable("player", (string)null);
                });

            modelBuilder.Entity("TerroscapeApp.Database.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<bool?>("DonePlan")
                        .HasColumnType("boolean")
                        .HasColumnName("done_plan");

                    b.Property<bool>("DoneRadio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("done_radio");

                    b.Property<int>("FirstAvatarId")
                        .HasColumnType("integer")
                        .HasColumnName("first_survivor_avatar");

                    b.Property<int>("FirstPlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("first_survivor_player");

                    b.Property<DBEnums.SurvivorStateEnum>("FirstState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("survivor_state_enum")
                        .HasDefaultValue(DBEnums.SurvivorStateEnum.Alive)
                        .HasColumnName("first_survivor_state");

                    b.Property<bool>("GotKeys")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("got_keys");

                    b.Property<bool>("HasPlans")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("has_plans");

                    b.Property<int>("KillerBoostNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("killer_boost_num");

                    b.Property<int>("KillerId")
                        .HasColumnType("integer")
                        .HasColumnName("killer_id");

                    b.Property<int>("KillerLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("killer_level");

                    b.Property<int>("KillerPlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("killer_player_id");

                    b.Property<bool>("KillerWin")
                        .HasColumnType("boolean")
                        .HasColumnName("killer_win");

                    b.Property<int>("MapId")
                        .HasColumnType("integer")
                        .HasColumnName("map_id");

                    b.Property<int>("SecondAvatarId")
                        .HasColumnType("integer")
                        .HasColumnName("second_survivor_avatar");

                    b.Property<int?>("SecondPlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("second_survivor_player");

                    b.Property<DBEnums.SurvivorStateEnum>("SecondState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("survivor_state_enum")
                        .HasDefaultValue(DBEnums.SurvivorStateEnum.Alive)
                        .HasColumnName("second_survivor_state");

                    b.Property<int>("SurvivorBoostNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("survivor_boost_num");

                    b.Property<int>("ThirdAvatarId")
                        .HasColumnType("integer")
                        .HasColumnName("third_survivor_avatar");

                    b.Property<int?>("ThirdPlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("third_survivor_player");

                    b.Property<DBEnums.SurvivorStateEnum>("ThirdState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("survivor_state_enum")
                        .HasDefaultValue(DBEnums.SurvivorStateEnum.Alive)
                        .HasColumnName("third_survivor_state");

                    b.Property<DBEnums.WinEnum>("WinWay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("win_enum")
                        .HasDefaultValue(DBEnums.WinEnum.Murder)
                        .HasColumnName("win_way");

                    b.HasKey("Id")
                        .HasName("round_id_pk");

                    b.HasIndex("FirstAvatarId");

                    b.HasIndex("FirstPlayerId");

                    b.HasIndex("KillerId");

                    b.HasIndex("KillerPlayerId");

                    b.HasIndex("MapId");

                    b.HasIndex("SecondAvatarId");

                    b.HasIndex("SecondPlayerId");

                    b.HasIndex("ThirdAvatarId");

                    b.HasIndex("ThirdPlayerId");

                    b.ToTable("round", (string)null);
                });

            modelBuilder.Entity("TerroscapeApp.Database.Round", b =>
                {
                    b.HasOne("TerroscapeApp.Database.Avatar", "FirstAvatar")
                        .WithMany("FirstSurvivorRounds")
                        .HasForeignKey("FirstAvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("round_first_avatar_fk");

                    b.HasOne("TerroscapeApp.Database.Player", "FirstPlayer")
                        .WithMany("FirstSurvivorRounds")
                        .HasForeignKey("FirstPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("round_first_player_fk");

                    b.HasOne("TerroscapeApp.Database.Killer", "Killer")
                        .WithMany("Rounds")
                        .HasForeignKey("KillerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("round_killer_fk");

                    b.HasOne("TerroscapeApp.Database.Player", "KillerPlayer")
                        .WithMany("KillerRounds")
                        .HasForeignKey("KillerPlayerId")
                        .IsRequired()
                        .HasConstraintName("round_killer_player_fk");

                    b.HasOne("TerroscapeApp.Database.Map", "Map")
                        .WithMany("Rounds")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("round_map_fk");

                    b.HasOne("TerroscapeApp.Database.Avatar", "SecondAvatar")
                        .WithMany("SecondSurvivorRounds")
                        .HasForeignKey("SecondAvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("round_second_avatar_fk");

                    b.HasOne("TerroscapeApp.Database.Player", "SecondPlayer")
                        .WithMany("SecondSurvivorRounds")
                        .HasForeignKey("SecondPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("round_second_player_fk");

                    b.HasOne("TerroscapeApp.Database.Avatar", "ThirdAvatar")
                        .WithMany("ThirdSurvivorRounds")
                        .HasForeignKey("ThirdAvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("round_third_avatar_fk");

                    b.HasOne("TerroscapeApp.Database.Player", "ThirdPlayer")
                        .WithMany("ThirdSurvivorRounds")
                        .HasForeignKey("ThirdPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("round_third_player_fk");

                    b.Navigation("FirstAvatar");

                    b.Navigation("FirstPlayer");

                    b.Navigation("Killer");

                    b.Navigation("KillerPlayer");

                    b.Navigation("Map");

                    b.Navigation("SecondAvatar");

                    b.Navigation("SecondPlayer");

                    b.Navigation("ThirdAvatar");

                    b.Navigation("ThirdPlayer");
                });

            modelBuilder.Entity("TerroscapeApp.Database.Avatar", b =>
                {
                    b.Navigation("FirstSurvivorRounds");

                    b.Navigation("SecondSurvivorRounds");

                    b.Navigation("ThirdSurvivorRounds");
                });

            modelBuilder.Entity("TerroscapeApp.Database.Killer", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("TerroscapeApp.Database.Map", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("TerroscapeApp.Database.Player", b =>
                {
                    b.Navigation("FirstSurvivorRounds");

                    b.Navigation("KillerRounds");

                    b.Navigation("SecondSurvivorRounds");

                    b.Navigation("ThirdSurvivorRounds");
                });
#pragma warning restore 612, 618
        }
    }
}
